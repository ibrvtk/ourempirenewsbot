from config import (
    TOGGLE_OER, TOGGLE_CRM,
    #ID_OERCHAT_ADMIN,
    ID_CRM_OE_ADMIN,
    LOG_ERRORS,# LOG_OTHERS,
    SUPERADMIN, PREFIX
)

import oerChat.adminside as oerAdminside
# import oerChat.databases.scheme as oerDB
# from oerChat.databases.scheduler import schedulerAppealsTimeout

# import CRM_OE.userside as crmUserside
# import CRM_OE.adminside as crmAdminside
import CRM_OE.database.scheme as crmDB

from re import compile

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.filters.command import CommandObject


rt = Router()



# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î CRM_OE/database/players.db .
# –í—Ä–µ–º–µ–Ω–Ω–∞—è, —Ç–∞–∫ –∫–∞–∫ –ë–î –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.
# –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –°—É–ø–µ—Ä–∞–¥–º–∏–Ω—É, —á—Ç–æ –±—ã –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
# –ü–æ–∑–∂–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ –∏–¥–µ–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ uniStart() .
@rt.message(F.user_id == SUPERADMIN, Command('db'))
async def cmdDb(message: Message) -> None:
    if TOGGLE_CRM:
        try:
            await crmDB.createUser(user_id=message.from_user.id)
            await message.reply("‚úÖ –£—Å–ø–µ—Ö")
        except Exception as e:
            print(f"(XX) main.py: uniStart(): {e}.")
            return

# @rt.message(Command("start"))
# async def cmdStart

@rt.message(F.text.lower() == "–±–æ—Ç")
@rt.message(F.text.lower() == f"{PREFIX}–±–æ—Ç")
async def fcmdCheck(message: Message) -> None: # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ. –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç —Ä–æ–∞–¥–º–∞–ø –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞.
    await message.reply("‚úÖ –ù–∞ –º–µ—Å—Ç–µ")


@rt.message(F.text.lower() == f"{PREFIX}–æ—Ç–º–µ–Ω–∞")
@rt.message(Command("cancel"))
async def cmdCancel(message: Message, state: FSMContext) -> None: # –ù–∞–ø–∏—Å–∞–Ω–æ —É–±–æ–≥–æ. –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.
    user_id = message.from_user.id

    try:
        await oerAdminside.unbanWriteAppealIdInDB(user_id, state)
        await state.clear()
        await message.answer("‚úÖ <b>–¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.</b>",
                                reply_markup=ReplyKeyboardRemove())
        
    except Exception as e:
        if int(e) == user_id:
            print(f"(X) master/handlers: cmdCancel(): –£ {user_id} –Ω–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.") if LOG_ERRORS else None
        else:
            print(f"(XX) master/handlers: cmdCancel(): {e}.")
        return


@rt.message(Command('help'))
async def cmd(message: Message, command: CommandObject):
    if command.args is None:
        await message.reply("Coming soon")
        return
    
    args = command.args.split()

    user_id = message.from_user.id

    if message.chat.id == ID_CRM_OE_ADMIN:
        user_data = await crmDB.readUser(user_id)
        if not user_data: return

        if args[0] == "user":
            title =       "üóÉÔ∏è <b>–ö–æ–º–∞–Ω–¥–∞ <code>user</code></b>"
            description = "–ë–î ‚Äî –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö. –û–Ω–∞ —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ —Ç–µ—Ö, –∫—Ç–æ –∫–æ–≥–¥–∞-—Ç–æ –±—ã–ª –∏–º." \
                          "–û–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ –∞–¥–º–∏–Ω–∫–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—á–∫–æ–≤, —Ä–µ–ø—É—Ç–∞—Ü–∏–∏, " \
                          "–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã, —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã, –∂–∏–≤ –ª–∏ –∏–≥—Ä–æ–∫ " \
                          "–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ–¥–µ (—Ç–µ–∫—Å—Ç, –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–∏)."
            touch =       "üõÑ <code>/user [—Å–æ–∑–¥–∞—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å/create/add/touch] [TG-ID]</code> ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î."
            cat =         "üõÇ <code>/user [–ø—Ä–æ—á–∏—Ç–∞—Ç—å/read/cat] [TG-ID]</code> ‚Äî —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö."
            nano_outro =  "–í–∞–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –¥–∞–∂–µ –µ—Å–ª–∏ –í—ã –∏—Ö –Ω–µ –º–µ–Ω—è–µ—Ç–µ."
            rm =          "üóëÔ∏è <code>/user [—É–¥–∞–ª–∏—Ç—å/delete/rm] [TG-ID]</code> ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ë–î."
            hashtags =    "<i>–¶–†–ú, –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞, –ë–î</i>"

            match int(user_data[1]):
                case 21:
                    nano = "üìù <code>/user [–∏–∑–º–µ–Ω–∏—Ç—å/update/nano] [TG-ID]* [–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç—Ä–∞–Ω—ã] [—Ñ–ª–∞–≥]</code> ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, " \
                           f"–≥–¥–µ –∑–≤—ë–∑–¥–æ—á–∫–∞ –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. {nano_outro}"
                    await message.reply(f"{title}\n{description}\n\n{touch}\n{cat}\n{nano}\n\n{hashtags}")

                case 22:
                    nano = "üìù <code>/user [–∏–∑–º–µ–Ω–∏—Ç—å/update/nano] [TG-ID]* [–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç—Ä–∞–Ω—ã] [—Ñ–ª–∞–≥] [–∫–∞–ø–∏—Ç—É–ª–∏—Ä–æ–≤–∞–Ω?]**</code> ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, " \
                           f"–≥–¥–µ –∑–≤—ë–∑–¥–æ—á–∫–∞ –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∞ –¥–≤–æ–π–Ω–∞—è –æ—Ç 0 –¥–æ 1, —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è True –∏ False. {nano_outro}"
                    await message.reply(f"{title}\n{description}\n\n{touch}\n{cat}\n{nano}\n\n{hashtags}")
                    
                case 5:
                    nano = "üìù <code>/user [–∏–∑–º–µ–Ω–∏—Ç—å/update/nano] [TG-ID]* [–∞–¥–º–∏–Ω–∫–∞]* [–æ—á–∫–∏]* [—Ä–µ–ø—É—Ç–∞—Ü–∏—è]* [–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã] [—Ñ–ª–∞–≥] [–∫–∞–ø–∏—Ç—É–ª–∏—Ä–æ–≤–∞–Ω?]**</code> ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, " \
                           f"–≥–¥–µ –∑–≤—ë–∑–¥–æ—á–∫–∞ –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∞ –¥–≤–æ–π–Ω–∞—è –æ—Ç 0 –¥–æ 1, —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è True –∏ False. {nano_outro}"
                    await message.reply(f"{title}\n{description}\n\n{touch}\n{cat}\n{nano}\n{rm}\n\n{hashtags}")

                case _:
                    await message.reply(f"{title}\n{description}\n\n{hashtags}")