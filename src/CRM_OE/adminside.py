from config import (
    BOT,
    #LOG_ERRORS,
    ID_CRM_OE_ADMIN, ID_CRM_OE_ADMIN_BOT_THREAD,
    ID#, PREFIX, SUPERADMIN
)

from CRM_OE.database.scheme import createOrUpdateUser, readUser, deleteUser

from aiogram import F, Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.filters.command import CommandObject


rt = Router()

cmduser_cmdhelp_user_notice = "–ù–µ –∑–Ω–∞–µ—Ç–µ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π? –ü—Ä–æ–ø–∏—à–∏—Ç–µ <code>/help user</code>."



@rt.message(F.chat.id == ID_CRM_OE_ADMIN, Command("user"))
async def cmdUser(message: Message, command: CommandObject):
    if message.message_thread_id != ID_CRM_OE_ADMIN_BOT_THREAD:
        cleared_chat_id = str(message.chat.id).replace("-100", "")
        link = f"https://t.me/c/{cleared_chat_id}/{ID_CRM_OE_ADMIN_BOT_THREAD}"
        await message.reply(f"–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ <a href='{link}'>—Ç–æ–ø–∏–∫–µ –±–æ—Ç–∞</a>.")
        return
    
    if command.args is None:
        await message.reply(f"‚ùå <b>–û—à–∏–±–∫–∞.</b> –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã.\n{cmduser_cmdhelp_user_notice}")
        return
    
    args = command.args.split()
    
    try:
        match len(args):
            case 2:
                if int(args[1]) == ID:
                    await message.reply(f"‚ùå <b>–û—à–∏–±–∫–∞.</b> –° –±–æ—Ç–æ–º –Ω–µ–ª—å–∑—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.")
                    return

                elif args[0] in ("—Å–æ–∑–¥–∞—Ç—å", "–¥–æ–±–∞–≤–∏—Ç—å", "create", "add", "touch"):
                    user_id = int(args[1])
                    user_data = await readUser(user_id)
                    user = await BOT.get_chat(user_id)

                    if not user_data:
                        await createOrUpdateUser(user_id)
                    else:
                        await message.reply(f"‚ùå <b>–û—à–∏–±–∫–∞.</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –ë–î.\n<code>/user –ø—Ä–æ—á–∏—Ç–∞—Ç—å {user_id}</code>")
                        return

                    user_user = f"@{user.username}" if user.username else f"{user.first_name} (<code>{user.id}</code>)"
                    await message.reply(f"‚úÖ <b>{user_user} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î.</b>\n<code>/user –ø—Ä–æ—á–∏—Ç–∞—Ç—å {user_id}</code>")
                    return
                
                elif args[0] in ("–ø—Ä–æ—á–∏—Ç–∞—Ç—å", "read", "cat"):
                    user_id = int(args[1])
                    user_data = await readUser(user_id)

                    if not user_data:
                        await message.reply("‚ùå <b>–û—à–∏–±–∫–∞.</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î.\n"
                                            f"–î–æ–±–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π <code>/user –¥–æ–±–∞–≤–∏—Ç—å {user_id}</code>.")
                        return
                    
                    countryName = str(user_data[4]).replace("_", " ")
                    countryNameWithFlag = f"{user_data[5]} {countryName}" if user_data[4] != "None" else "–≠—Ç–æ –Ω–µ –∏–≥—Ä–æ–∫"

                    match user_data[6]:
                        case 0:
                            if user_data[4] == "None":
                                countryStatus = ""
                            else:
                                countryStatus = "\n<b>–°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω—ã:</b> –ö–∞–ø–∏—Ç—É–ª–∏—Ä–æ–≤–∞–ª"
                        case 1:
                            countryStatus = "\n<b>–°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω—ã:</b> –ü–æ–∫–∞ –∂–∏–≤"

                    if user_data[6] == 1:
                        turnIsSended = "\n<b>–°—Ç–∞—Ç—É—Å —Ö–æ–¥–∞:</b> –û—Ç–ø—Ä–∞–≤–ª–µ–Ω" if user_data[9] == 1 else "\n<b>–°—Ç–∞—Ç—É—Å —Ö–æ–¥–∞:</b> –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
                    elif user_data[6] == 0:
                        turnIsSended = ""

                    user = await BOT.get_chat(user_id)
                    user_user = f"@{user.username}" if user.username else f"{user.first_name} (<code>{user.id}</code>)"
                    intro = f"üõÇ <b>–î–∞–Ω–Ω—ã–µ {user_user}</b>"
                    user_data_for_nano = "/user –∏–∑–º–µ–Ω–∏—Ç—å "

                    match user_data[1]:
                        case 21:
                            user_data_for_nano += f"{user_id} {user_data[4]} {user_data[5]} {user_data[6]}"
                        case 22:
                            user_data_for_nano += f"{user_id} {user_data[4]} {user_data[5]}"
                        case 5:
                            user_data_for_nano += f"{user_id} {user_data[1]} {user_data[2]} {user_data[3]} {user_data[4]} {user_data[5]} {user_data[6]}"

                    await message.reply(f"{intro}\n\n"
                                        f"<b>–£—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user_data[1]}\n"
                                        f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤:</b> {user_data[2]}\n"
                                        f"<b>–†–µ–ø—É—Ç–∞—Ü–∏—è:</b> {user_data[3]}\n"
                                        f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {countryNameWithFlag}"
                                        f"{countryStatus}"
                                        f"{turnIsSended}"
                                        f"\n\n<code>{user_data_for_nano}</code>")
                    return
                    
                elif args[0] in ("—É–¥–∞–ª–∏—Ç—å", "delete", "rm"):
                    user_id = int(args[1])
                    await deleteUser(user_id)
                    user = await BOT.get_chat(user_id)

                    user_user = f"@{user.username}" if user.username else f"{user.first_name} (<code>{user.id}</code>)"
                    text = f"üóëÔ∏è <b>–î–∞–Ω–Ω—ã–µ {user_user} —É–¥–∞–ª–µ–Ω—ã.</b>"
                    await message.reply(f"{text}")
                    return
                
                else:
                    await message.reply(f"‚ùå <b>–û—à–∏–±–∫–∞.</b> –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n{cmduser_cmdhelp_user_notice}")
                    return
            
            case 4 | 5 | 8:
                if args[0] in ("–∏–∑–º–µ–Ω–∏—Ç—å", "update", "nano"):
                    user_id = int(args[1])
                    user_data = await readUser(user_id)
                    user = await BOT.get_chat(user_id)

                    if user_data[1] == 21 and len(args) == 5:
                        countryName = f"{str(args[2])}"
                        countryFlag = f"{str(args[3])}"
                        countryStatus = int(args[4])
                        await createOrUpdateUser(user_id, countryName=countryName, countryFlag=countryFlag, countryStatus=countryStatus)
                    elif user_data[1] == 22 and len(args) == 4:
                        countryName = f"{str(args[2])}"
                        countryFlag = f"{str(args[3])}"
                        await createOrUpdateUser(user_id, countryName=countryName, countryFlag=countryFlag)
                    elif user_data[1] == 5 and len(args) == 8:
                        adminLevel = int(args[2])
                        points = int(args[3])
                        reputation = int(args[4])
                        countryName = f"{str(args[5])}"
                        countryFlag = f"{str(args[6])}"
                        countryStatus = int(args[7])
                        await createOrUpdateUser(user_id, adminLevel, points, reputation, countryName, countryFlag, countryStatus)
                    else:
                        await message.reply("‚ùå <b>–û—à–∏–±–∫–∞.</b> –£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã "
                                            "–∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
                        return
                            
                    user_user = f"@{user.username}" if user.username else f"{user.first_name} (<code>{user.id}</code>)"
                    await message.reply(f"‚úÖ <b>–î–∞–Ω–Ω—ã–µ {user_user} –∏–∑–º–µ–Ω–µ–Ω—ã.</b>\n<code>/user –ø—Ä–æ—á–∏—Ç–∞—Ç—å {user_id}</code>")
                    return

            case _:
                await message.reply(f"‚ùå <b>–û—à–∏–±–∫–∞.</b> –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.\n{cmduser_cmdhelp_user_notice}")
                return
            
    except ValueError as e:
        await message.reply("‚ùå <b>–û—à–∏–±–∫–∞.</b> –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –æ–¥–Ω–æ –∏–∑ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.\n"
                            "–ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è TG-ID.")
        return
    except Exception as e:
        await message.reply("‚ùå <b>–û—à–∏–±–∫–∞!</b> –í–æ–∑–º–æ–∂–Ω–æ –∏—Å–∫–æ–º—ã–π —á–µ–ª–æ–≤–µ–∫ –Ω–µ –∏–º–µ–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –±–æ—Ç–æ–º –∏–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –ë–î.")
        if str(e) != "":
            await message.answer(f"<blockquote><b>Raw –æ—à–∏–±–∫–∞:</b>\n{e}</blockquote>\n<i>–ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî <b>—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ</b> –æ—à–∏–±–∫–∞ –æ–¥–Ω–∞ –∏–∑ —Ç–µ—Ö, —á—Ç–æ –±—ã–ª–∞ —É–ø–æ–º—è–Ω—É—Ç–∞ –≤—ã—à–µ.</i>")
        return