from config import (
    BOT,
    LOG_ERRORS,
    ID_CRM_OE_ADMIN, ID_CRM_OE_ADMIN_BOT_THREAD,
    PREFIX, SUPERADMIN
)

from CRM_OE.keyboards import adminpanelKeyboard
from CRM_OE.database.scheme import createOrUpdateUser, readUser

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters.command import CommandObject


rt = Router()



@rt.message(F.chat.id == ID_CRM_OE_ADMIN, Command("user"))
async def cmd(message: Message, command: CommandObject):
    if message.message_thread_id != ID_CRM_OE_ADMIN_BOT_THREAD:
        cleared_chat_id = str(message.chat.id).replace("-100", "")
        link = f"https://t.me/c/{cleared_chat_id}/{ID_CRM_OE_ADMIN_BOT_THREAD}"
        await message.reply(f"–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ <a href='{link}'>—Ç–æ–ø–∏–∫–µ –±–æ—Ç–∞</a>.")
        return
    
    if command.args is None:
        await message.reply("Error #1: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return
    
    args = command.args.split()

    if len(args) == 1:
        await message.reply("Error #2: –ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
        return
    
    elif len(args) == 2:
        if args[0] in ("–¥–æ–±–∞–≤–∏—Ç—å", "create", "touch"):
            try:
                user_id = int(args[1])
                user = await BOT.get_chat(user_id)
                await createOrUpdateUser(user_id, 0, 0, 0, "None", "üè¥", 0, "None", "None", 0)
                user_user = f"@{user.username}" if user.username else f"{user.first_name} (<code>{user.id}</code>)"
                await message.reply(f"üõÇ <b>{user_user} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î.</b>")
            except ValueError:
                await message.reply("Error #3.2: ValueError. –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å TG-ID —á–µ–ª–æ–≤–µ–∫–∞.")
                return
            except Exception as e:
                await message.reply(f"‚ùå <b>–û—à–∏–±–∫–∞.</b> –í–æ–∑–º–æ–∂–Ω–æ —É –±–æ—Ç–∞ –Ω–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º. "
                                    "–í–æ –≤—Å—è–∫–æ–º —Å–ª—É—á–∞–µ, –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å –Ω–∏–º —Å–≤—è–∑—å.\n\n"
                                    f"<blockquote><b>–ö–æ–¥ –æ—à–∏–±–∫–∏:</b>\n{e}</blockquote>")

        if args[0] in ("–ø—Ä–æ—á–∏—Ç–∞—Ç—å", "read", "cat"):
            try:
                user_id = int(args[1])
                user_data = await readUser(user_id)
                if not user_data:
                    await message.reply("‚ùå <b>–û—à–∏–±–∫–∞.</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î.\n"
                                        f"–î–æ–±–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π <code>/user –¥–æ–±–∞–≤–∏—Ç—å {user_id}</code>.")
                    return
                
                countryName = str(user_data[4]).replace("_", " ")
                countryNameWithFlag = f"{user_data[5]} {countryName}" if user_data[4] != "None" else "–≠—Ç–æ –Ω–µ –∏–≥—Ä–æ–∫"
                match user_data[6]:
                    case 0:
                        if user_data[4] == "None":
                            countryStatus = ""
                        else:
                            countryStatus = "<b>–°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω—ã:</b> –ö–∞–ø–∏—Ç—É–ª–∏—Ä–æ–≤–∞–ª\n"
                    case 1:
                        countryStatus = "<b>–°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω—ã:</b> –ü–æ–∫–∞ –∂–∏–≤\n"

                if user_data[6] == 1:
                    turnIsSended = "<b>–°—Ç–∞—Ç—É—Å —Ö–æ–¥–∞:</b> –û—Ç–ø—Ä–∞–≤–ª–µ–Ω\n" if user_data[9] == 1 else "<b>–°—Ç–∞—Ç—É—Å —Ö–æ–¥–∞:</b> –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n"
                elif user_data[6] == 0:
                    turnIsSended = ""

                cursed_symbols = ("(", ")", ",", "'")
                user_data_for_nano = str(user_data)
                for symbol in cursed_symbols:
                    user_data_for_nano = user_data_for_nano.replace(symbol, "")
                user_data_for_nano = f"/user –∏–∑–º–µ–Ω–∏—Ç—å {user_data_for_nano}"

                try:
                    user = await BOT.get_chat(user_id)
                    user_user = f"@{user.username}" if user.username else f"{user.first_name} (<code>{user.id}</code>)"
                    intro = f"üõÇ <b>–î–∞–Ω–Ω—ã–µ {user_user}</b>"
                    outro = ""
                except:
                    intro = f"üõÇ <b>–î–∞–Ω–Ω—ã–µ <code>{user_id}</code></b>"
                    outro = "<i>–ù–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –±–æ—Ç–æ–º</i>\n"

                await message.reply(f"{intro}\n\n"
                                    f"<b>–£—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user_data[1]}\n"
                                    f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤:</b> {user_data[2]}\n"
                                    f"<b>–†–µ–ø—É—Ç–∞—Ü–∏—è:</b> {user_data[3]}\n"
                                    f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {countryNameWithFlag}\n"
                                    f"{countryStatus}"
                                    f"{turnIsSended}"
                                    f"\n{outro}"
                                    f"<code>{user_data_for_nano}</code>")
            except ValueError:
                await message.reply("Error #3.1: ValueError. –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å TG-ID —á–µ–ª–æ–≤–µ–∫–∞.")
                return
            except Exception as e:
                await message.reply(f"‚ùå <b>–û—à–∏–±–∫–∞.</b> –í–æ–∑–º–æ–∂–Ω–æ —É –±–æ—Ç–∞ –Ω–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º –∏–ª–∏ –µ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –≤ –ë–î. "
                                    "–í–æ –≤—Å—è–∫–æ–º —Å–ª—É—á–∞–µ, –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å –Ω–∏–º —Å–≤—è–∑—å.\n\n"
                                    f"<blockquote><b>–ö–æ–¥ –æ—à–∏–±–∫–∏:</b>\n{e}</blockquote>")
                
    elif len(args) == 8:
        if args[0] in ("–∏–∑–º–µ–Ω–∏—Ç—å", "update", "nano"):
            try:
                user_id = int(args[1])
                user_data = await readUser(user_id)
                adminLevel = int(args[2])
                points = int(args[3])
                reputation = int(args[4])
                countryName = f"{str(args[5]).replace("_", " ")}"
                countryFlag = f"{str(args[6])}"
                countryStatus = int(args[7])

                user = await BOT.get_chat(user_id)
                await createOrUpdateUser(user_id, adminLevel, points, reputation, countryName, countryFlag, countryStatus, user_data[7], user_data[8], user_data[9])
                user_user = f"@{user.username}" if user.username else f"{user.first_name} (<code>{user.id}</code>)"
                await message.reply(f"üõÇ <b>{user_user} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î.</b>")
            except ValueError:
                await message.reply("Error #3.3: ValueError. –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å TG-ID —á–µ–ª–æ–≤–µ–∫–∞.")
                return
            except Exception as e:
                await message.reply(f"‚ùå <b>–û—à–∏–±–∫–∞.</b> –í–æ–∑–º–æ–∂–Ω–æ —É –±–æ—Ç–∞ –Ω–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º. "
                                    "–í–æ –≤—Å—è–∫–æ–º —Å–ª—É—á–∞–µ, –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å –Ω–∏–º —Å–≤—è–∑—å.\n\n"
                                    f"<blockquote><b>–ö–æ–¥ –æ—à–∏–±–∫–∏:</b>\n{e}</blockquote>")

    else:
        await message.reply("Error #4")