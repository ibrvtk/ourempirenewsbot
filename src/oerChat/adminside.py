from config import bot, logErrors, ID_OERCHAT_ADMIN, ID_OERCHAT_ADMIN_APPEALS_THREAD
from oerChat.keyboards import unbanKeyboard_, unbanKeyboardAcceptedActions_
from oerChat.databases.appeals import createUser, readUser, updateUser

from dataclasses import dataclass
from datetime import datetime

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext


adminside = Router()

conversationData = {}



# /unban:
# appellant ‚Äî –ø–æ–¥–∞—é—â–∏–π –∞–ø–µ–ª–ª—è—Ü–∏—é, admin ‚Äî –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π.
class fsmUnbanSendAppeal(StatesGroup):
    text = State() # –ò—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏. –ó–Ω–∞—á–µ–Ω–∏–µ —Å–ª–∏–≤–∞–µ—Ç—Å—è –≤ conversationData[appellant_id][f'message_{msgCount}'], –∞ –ø–æ—Å–ª–µ –æ–±–Ω—É–ª—è–µ—Ç—Å—è.

@dataclass
class ConversationDataclass:
    appellant_id: int = 0
    appellant_user: str = ""
    admin_id: int | None = None
    admin_user: str | None = None
    appeal_id: str = ""
    appeal_status: bool = True
    admin_message_id: int | None = None
    appellant_message_count: int = 0


async def appealStatusCheck(appellant_id: int, state: FSMContext) -> bool:
    global conversationData
    
    if appellant_id not in conversationData:
        await state.clear()
        return False
    
    appeal_status = conversationData[appellant_id].appeal_status
    
    if not appeal_status:
        await state.clear()
        del conversationData[appellant_id]
        return False
    
    return True

async def appealIdWrite(appellant_id: int, state: FSMContext) -> None:
    appellant_data = await readUser(appellant_id)
    global conversationData
    appeal_id = conversationData[appellant_id].appeal_id

    if appellant_data[1] == "None":
        appeal_id_for_database = f"{appeal_id}, "
        await updateUser(appellant_id, appeal_ids=appeal_id_for_database)
    else:
        appeal_id_for_database = f"{appellant_data[1]}{appeal_id}, "
        await updateUser(appellant_id, appeal_ids=appeal_id_for_database)

    conversationData[appellant_id].appeal_status = False; await appealStatusCheck(appellant_id, state)


# –ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã /unban
@adminside.message(F.chat.type == "private", Command("unban"))
async def cmdUnban(message: Message, state: FSMContext) -> None:
    appellant_id = message.from_user.id
    appellant_user = f"@{message.from_user.username}" if message.from_user.username else f"{message.from_user.first_name} (<code>{message.from_user.id}</code>)"
    await createUser(appellant_id)
    appellant_data = await readUser(appellant_id)
    global conversationData

    if appellant_data[2] > datetime.now().timestamp():
        timeout_end = datetime.fromtimestamp(appellant_data[2])
        await message.reply(f"üìµ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–æ <b>{timeout_end.strftime('%d.%m.%Y %H:%M')}</b>.")
        return

    if appellant_id in conversationData:
        await message.reply("‚ùå <b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –∞–ø–µ–ª–ª—è—Ü–∏—è!</b>")
        return
    
    from random import choice, randint
    appeal_codename = choice(["Charlie", "Delta", "Echo", "Foxtrot", "Golf", "Hotel", "Alpha", "Bravo", "Kilo"])
    appeal_id = f"{appellant_id}_{appeal_codename}_{randint(0, 9)}"

    if appellant_data and appellant_data[1] != "None":
        existing_ids = appellant_data[1].split(", ")
        while appeal_id in existing_ids:
            appeal_codename = choice(["Charlie", "Delta", "Echo", "Foxtrot", "Golf", "Hotel", "Alpha", "Bravo", "Kilo"])
            appeal_id = f"{appellant_id}_{appeal_codename}_{randint(0, 9)}"

    conversationData[appellant_id] = ConversationDataclass(
        appellant_id = appellant_id,
        appellant_user = appellant_user,
        appeal_id = appeal_id
    )

    await state.set_state(fsmUnbanSendAppeal.text)

    await message.answer(f"üÜò <b>–ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–∞ —Ä–∞–∑–±–∞–Ω</b> ‚Äî {appellant_user}\n"
                        "–í–∞—à–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –æ—Ç–∫—É–¥–∞ —Å –í–∞–º–∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –æ–±—â–µ–Ω–∏–µ.\n"
                        "–û–ø–∏—à–∏—Ç–µ –∑–∞ —á—Ç–æ –í–∞—Å –∑–∞–±–∞–Ω–∏–ª–∏ <i>(–µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ)</i> –∏ –ø–æ—á–µ–º—É –í—ã –Ω–∞—Ä—É—à–∞–ª–∏.\n\n"
                        "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /cancel.</i>")
    
@adminside.message(fsmUnbanSendAppeal.text)
async def fsmUnbanSendAppealText(message: Message, state: FSMContext) -> None:
    appellant_id = message.from_user.id
    appellant_user = f"@{message.from_user.username}" if message.from_user.username else f"{message.from_user.first_name} (<code>{message.from_user.id}</code>)"
    global conversationData

    await appealStatusCheck(appellant_id, state)

    if not message.text:
        await state.clear()
        del conversationData[appellant_id]
        await message.reply("‚ùå <b>–û—à–∏–±–∫–∞.</b> –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É /unban.")
        return

    conversationData[appellant_id]['appellant_message_count'] += 1
    appellant_message_count = conversationData[appellant_id]['appellant_message_count']
    message_ = f"message_{appellant_message_count}"

    match appellant_message_count:
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ (–æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ø–µ–ª–ª—è—Ü–∏–∏).
        case 1:
            conversationData[appellant_id][message_] = message.text

            await message.reply("‚úÖ <b>–ê–ø–µ–ª–ª—è—Ü–∏—è –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.</b> –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")

            message_id = await bot.send_message(
                chat_id=ID_OERCHAT_ADMIN,
                message_thread_id=ID_OERCHAT_ADMIN_APPEALS_THREAD,
                text=f"üÜò <b>–ù–æ–≤–∞—è –∞–ø–µ–ª–ª—è—Ü–∏—è</b> ‚Äî {appellant_user}\n"
                f"<blockquote>{conversationData[appellant_id][message_]}</blockquote>",
                reply_markup=unbanKeyboard_(conversationData[appellant_id]['appeal_id'])
            )
            conversationData[appellant_id]['admin_message_id'] = message_id.message_id

        # –ï—Å–ª–∏ –∞–ø–µ–ª–ª—è—Ü–∏—è —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞ –∏ —á–µ–ª–æ–≤–µ–∫ –≤–µ–¥—ë—Ç –ø–µ—Ä–µ–ø–∏—Å–∫—É.
        case _:
            conversationData[appellant_id][message_] = message.text
            appellant_message_id = message.message_id

            await bot.set_message_reaction(
                chat_id=appellant_id,
                message_id=appellant_message_id,
                reaction=[{"type": "emoji", "emoji": "üëç"}]
            )

            await bot.edit_message_text(
                chat_id=ID_OERCHAT_ADMIN,
                message_id=conversationData[appellant_id]['admin_message_id'],
                text=f"üÜò <b>–ê–ø–µ–ª–ª—è—Ü–∏—è</b> ‚Äî {appellant_user}\n"
                f"<blockquote>{conversationData[appellant_id][message_]}</blockquote>\n\n"
                f"<i>–ü—Ä–∏–Ω—è—Ç {conversationData[appellant_id]['admin_user']}</i>",
                reply_markup=unbanKeyboardAcceptedActions_(conversationData[appellant_id]['appeal_id'])
            )


# –ê–ø–µ–ª–ª—è—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞.
@adminside.callback_query(F.data.startswith("unbanAppealAccept_"))
async def cbUnbanAppealAccept(callback: CallbackQuery) -> None:
    appellant_id = int(callback.data.split("_")[1])
    admin_user = f"@{callback.from_user.username}" if callback.from_user.username else f"{callback.from_user.first_name} (<code>{callback.from_user.id}</code>)"
    appellant_data = await readUser(appellant_id)
    appeal_ids = appellant_data[1].split(", ")
    global conversationData

    if conversationData[appellant_id]['appeal_id'] in appeal_ids:
        await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    conversationData[appellant_id]['admin_id'] = callback.from_user.id
    conversationData[appellant_id]['admin_user'] = admin_user

    await bot.send_message(
        chat_id=appellant_id,
        text="‚úÖ <b>–ê–ø–µ–ª–ª—è—Ü–∏—è –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b> –£ –í–∞—Å –Ω–∞—á–∞–ª—Å—è –¥–∏–∞–ª–æ–≥ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º <i>(—á–µ—Ä–µ–∑ –±–æ—Ç–∞)</i>."
    )

    await callback.message.edit_text(f"üÜò <b>–ê–ø–µ–ª–ª—è—Ü–∏—è</b> ‚Äî {conversationData[appellant_id]['appellant_user']}\n"
                                    f"<blockquote>{conversationData[appellant_id]['message_1']}</blockquote>\n\n"
                                    f"<i>–ü—Ä–∏–Ω—è—Ç {admin_user}</i>",
                                    reply_markup=unbanKeyboardAcceptedActions_(conversationData[appellant_id]['appeal_id']))
    # –î–∏—Å–∫—É—Å—Å–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤ fsmUnbanSendAppealText: match msgCount: case _ .
    
# –ê–ø–µ–ª–ª—è—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.
@adminside.callback_query(F.data.startswith("unbanAppealDecline_"))
async def cbUnbanAppealDecline(callback: CallbackQuery, state: FSMContext) -> None:
    appellant_id = int(callback.data.split("_")[1])
    admin_user = f"@{callback.from_user.username}" if callback.from_user.username else f"{callback.from_user.first_name} (<code>{callback.from_user.id}</code>)"
    appellant_data = await readUser(appellant_id)
    appeal_ids = appellant_data[1].split(", ")
    global conversationData

    if conversationData[appellant_id]['appeal_id'] in appeal_ids:
        await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    await appealIdWrite(appellant_id)

    conversationData[appellant_id]['admin_id'] = callback.from_user.id
    conversationData[appellant_id]['admin_user'] = admin_user

    await bot.send_message(
        chat_id=appellant_id,
        text="üóë <b>–í–∞—à—É –∞–ø–µ–ª–ª—è—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–∏–ª–∏.</b>"
    )

    await bot.edit_message_text(
        chat_id=ID_OERCHAT_ADMIN,
        message_id=conversationData[appellant_id]['admin_message_id'],
        text=f"üÜò <b>–ê–ø–µ–ª–ª—è—Ü–∏—è</b> ‚Äî {conversationData[appellant_id]['appellant_user']}\n"
        f"<blockquote>{conversationData[appellant_id][f'message_1']}</blockquote>\n\n"
        f"<i>–û—Ç–∫–ª–æ–Ω—ë–Ω {admin_user}</i>",
        reply_markup=None
    )

    conversationData[appellant_id]['appeal_status'] = False; await appealStatusCheck(appellant_id, state)

# –í—ã–¥–∞–Ω —Ç–∞–π–º–∞—É—Ç.
class fsmTimeoutSetTime(StatesGroup):
    time = State()

@adminside.callback_query(F.data.startswith("unbanAppealTimeout_"))
async def unbanAppealTimeout(callback: CallbackQuery, state: FSMContext) -> None:
    appellant_id = int(callback.data.split("_")[1])
    admin_user = f"@{callback.from_user.username}" if callback.from_user.username else f"{callback.from_user.first_name} (<code>{callback.from_user.id}</code>)"
    appellant_data = await readUser(appellant_id)
    appeal_ids = appellant_data[1].split(", ")
    global conversationData

    if conversationData[appellant_id]['appeal_id'] in appeal_ids:
        await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    conversationData[appellant_id]['admin_id'] = callback.from_user.id
    conversationData[appellant_id]['admin_user'] = admin_user

    await state.clear()
    await state.set_state(fsmTimeoutSetTime.time)
    await state.update_data(appellant_id=appellant_id, admin_user=admin_user)

    await callback.message.edit_text("‚è±Ô∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤ <b>—Å–ª–µ–¥—É—é—â–µ–º</b> —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—Ä–µ–º—è –≤ <b>—Å–µ–∫—É–Ω–¥–∞—Ö,</b> "
                                    "–Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –ª–∏—à–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º. <b>–ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ.</b>")
    
@adminside.message(fsmTimeoutSetTime.time)
async def fsmTimeoutSetTimeTime(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    appellant_id = data.get('appellant_id')
    admin_user = data.get('admin_user')
    global conversationData

    if not appellant_id or appellant_id not in conversationData:
        return

    if message.from_user.id != conversationData[appellant_id]['admin_id']:
        return

    try:
        time_seconds = int(message.text.strip())

        if time_seconds <= 0:
            await message.reply("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return

        timeout_end = int(datetime.now().timestamp()) + time_seconds
        
        if time_seconds < 60: time_display = f"{time_seconds} —Å–µ–∫—É–Ω–¥"
        elif time_seconds < 3600: time_minutes = time_seconds // 60; time_display = f"{time_minutes} –º–∏–Ω—É—Ç"
        else: time_hours = time_seconds // 3600; time_display = f"{time_hours} —á–∞—Å–æ–≤"
        
        await updateUser(appellant_id, timeout=timeout_end)

        await appealIdWrite(appellant_id)

        await bot.send_message(
            chat_id=appellant_id,
            text=f"üìµ <b>–í–∞–º –≤—ã–¥–∞–ª–∏ —Ç–∞–π–º–∞—É—Ç –Ω–∞ {time_display}.</b>"
        )

        await bot.edit_message_text(
            chat_id=ID_OERCHAT_ADMIN,
            message_id=conversationData[appellant_id]['admin_message_id'],
            text=f"üÜò <b>–ê–ø–µ–ª–ª—è—Ü–∏—è</b> ‚Äî {conversationData[appellant_id]['appellant_user']}\n"
            f"<blockquote>{conversationData[appellant_id]['message_1']}</blockquote>\n\n"
            f"<i>{admin_user} –≤—ã–¥–∞–ª —Ç–∞–π–º–∞—É—Ç –Ω–∞ {time_seconds} —Å–µ–∫—É–Ω–¥</i>",
            reply_markup=None
        )

        conversationData[appellant_id]['appeal_status'] = False; await appealStatusCheck(appellant_id, state)


    except ValueError as e:
        await message.reply("‚ùå <b>–û—à–∏–±–∫–∞!</b> –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–∫—É–Ω–¥—ã —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        print(f"(X) oerChat/adminside.py: fsmTimeoutSetTimeTime(): ValueError? ‚Äî {e}.")
        return
    except Exception as e:
        await message.reply("‚ùå <b>–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–ø–µ–ª–ª—è—Ü–∏—è –∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ª–∏ –≤—ã —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–µ–∫—É–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        print(f"(XX) oerChat/adminside.py: fsmTimeoutSetTimeTime(): {e}.")
        return


# –í —Ä–∞–∑–±–∞–Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.
@adminside.callback_query(F.data.startswith("unbanAppealAcceptUnban_"))
async def unbanAppealAcceptUnban(callback: CallbackQuery, state: FSMContext) -> None:
    appellant_id = int(callback.data.split("_")[1])
    admin_user = f"@{callback.from_user.username}" if callback.from_user.username else f"{callback.from_user.first_name} (<code>{callback.from_user.id}</code>)"
    appellant_data = await readUser(appellant_id)
    appeal_ids = appellant_data[1].split(", ")
    global conversationData

    if conversationData[appellant_id]['appeal_id'] in appeal_ids:
        await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    if callback.from_user.id != conversationData[appellant_id]['admin_id']:
        await callback.answer("üñï –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∞–ø–µ–ª–ª—è—Ü–∏—è!")
        return

    await bot.send_message(
        chat_id=appellant_id,
        text="üéâ <b>–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã!</b> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –°–Ω–æ–≤–∞."
    )

    await bot.edit_message_text(
        chat_id=ID_OERCHAT_ADMIN,
        message_id=conversationData[appellant_id]['admin_message_id'],
        text=f"üÜò <b>–†–µ—à—ë–Ω–Ω–∞—è –∞–ø–µ–ª–ª—è—Ü–∏—è</b> ‚Äî {conversationData[appellant_id]['appellant_user']}\n"
        f"–ü—Ä–∏–Ω—è—Ç {admin_user}"
        f"–ò—Ç–æ–≥: —Ä–∞–∑–±–∞–Ω",
        reply_markup=None
    )

    await state.clear()
    del conversationData[appellant_id]

# –í —Ä–∞–∑–±–∞–Ω–µ –æ—Ç–∫–∞–∑–∞–Ω–æ.
@adminside.callback_query(F.data.startswith("unbanAppealDeclineUnban_"))
async def unbanAppealDeclineUnban(callback: CallbackQuery, state: FSMContext) -> None:
    appellant_id = int(callback.data.split("_")[1])
    admin_user = f"@{callback.from_user.username}" if callback.from_user.username else f"{callback.from_user.first_name} (<code>{callback.from_user.id}</code>)"
    appellant_data = await readUser(appellant_id)
    appeal_ids = appellant_data[1].split(", ")
    global conversationData

    if conversationData[appellant_id]['appeal_id'] in appeal_ids:
        await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    await appealIdWrite(appellant_id)

    if callback.from_user.id != conversationData[appellant_id]['admin_id']:
        await callback.answer("üñï –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∞–ø–µ–ª–ª—è—Ü–∏—è!")
        return

    await bot.send_message(
        chat_id=appellant_id,
        text="‚ùå <b>–í–∞–º –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ —Ä–∞–∑–±–∞–Ω–µ.</b>"
    )

    await bot.edit_message_text(
        chat_id=ID_OERCHAT_ADMIN,
        message_id=conversationData[appellant_id]['admin_message_id'],
        text=f"üÜò <b>–†–µ—à—ë–Ω–Ω–∞—è –∞–ø–µ–ª–ª—è—Ü–∏—è</b> ‚Äî {conversationData[appellant_id]['appellant_user']}\n"
        f"–ü—Ä–∏–Ω—è—Ç {admin_user}\n"
        f"–ò—Ç–æ–≥: –æ—Ç–∫–∞–∑",
        reply_markup=None
    )

    conversationData[appellant_id]['appeal_status'] = False; await appealStatusCheck(appellant_id, state)


# –ü—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏—Å–∫—É—Å—Å–∏–∏.
@adminside.callback_query(F.data.startswith("unbanAppealHistoryPrev_"))
async def unbanAppealHistoryPrev(callback: CallbackQuery) -> None:
    appellant_id = int(callback.data.split("_")[1])
    admin_user = f"@{callback.from_user.username}" if callback.from_user.username else f"{callback.from_user.first_name} (<code>{callback.from_user.id}</code>)"
    appellant_data = await readUser(appellant_id)
    appeal_ids = appellant_data[1].split(", ")
    global conversationData

    if conversationData[appellant_id]['appeal_id'] in appeal_ids:
        await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    if callback.from_user.id != conversationData[appellant_id]['admin_id']:
        await callback.answer("üñï –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∞–ø–µ–ª–ª—è—Ü–∏—è!")
        return
    
    conversationData[appellant_id]['appellant_message_count'] -= 1

    if conversationData[appellant_id]['appellant_message_count'] <= 0:
        conversationData[appellant_id]['appellant_message_count'] += 1
        await callback.answer("‚ùå –≠—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    await bot.edit_message_text(
        chat_id=ID_OERCHAT_ADMIN,
        message_id=conversationData[appellant_id]['admin_message_id'],
        text=f"üÜò <b>–ê–ø–µ–ª–ª—è—Ü–∏—è</b> ‚Äî {conversationData[appellant_id]['appellant_user']}\n"
        f"<blockquote>{conversationData[appellant_id][f'message_{conversationData[appellant_id]['appellant_message_count']}']}</blockquote>\n\n"
        f"<i>–ü—Ä–∏–Ω—è—Ç {admin_user}</i>",
        reply_markup=unbanKeyboardAcceptedActions_(conversationData[appellant_id]['appeal_id'])
    )

# –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏—Å–∫—É—Å—Å–∏–∏.
@adminside.callback_query(F.data.startswith("unbanAppealHistoryNext_"))
async def unbanAppealHistoryNext(callback: CallbackQuery) -> None:
    appellant_id = int(callback.data.split("_")[1])
    admin_user = f"@{callback.from_user.username}" if callback.from_user.username else f"{callback.from_user.first_name} (<code>{callback.from_user.id}</code>)"
    appellant_data = await readUser(appellant_id)
    appeal_ids = appellant_data[1].split(", ")
    global conversationData

    if conversationData[appellant_id]['appeal_id'] in appeal_ids:
        await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    if callback.from_user.id != conversationData[appellant_id]['admin_id']:
        await callback.answer("üñï –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∞–ø–µ–ª–ª—è—Ü–∏—è!")
        return
    
    conversationData[appellant_id]['appellant_message_count'] += 1

    if f"message_{conversationData[appellant_id]['appellant_message_count']}" not in conversationData[appellant_id]:
        conversationData[appellant_id]['appellant_message_count'] -= 1
        await callback.answer("‚ùå –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    await bot.edit_message_text(
        chat_id=ID_OERCHAT_ADMIN,
        message_id=conversationData[appellant_id]['admin_message_id'],
        text=f"üÜò <b>–ê–ø–µ–ª–ª—è—Ü–∏—è</b> ‚Äî {conversationData[appellant_id]['appellant_user']}\n"
        f"<blockquote>{conversationData[appellant_id][f'message_{conversationData[appellant_id]['appellant_message_count']}']}</blockquote>\n\n"
        f"<i>–ü—Ä–∏–Ω—è—Ç {admin_user}</i>",
        reply_markup=unbanKeyboardAcceptedActions_(conversationData[appellant_id]['appeal_id'])
    )