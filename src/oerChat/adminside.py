from config import (
    BOT, LOG_ERRORS,
    ID_OERCHAT_ADMIN, ID_OERCHAT_ADMIN_APPEALS_THREAD,
    PREFIX, SUPERADMIN
)

from oerChat.keyboards import unbanKeyboard_, unbanKeyboardAcceptedActions_
from oerChat.databases.appeals import createUser, readUser, updateUser

from asyncio import sleep, create_task
from datetime import datetime
from dataclasses import dataclass

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder


rt = Router()

appealData = {}
messagesData = {}



'''V /unban V'''
# appellant ‚Äî –ø–æ–¥–∞—é—â–∏–π –∞–ø–µ–ª–ª—è—Ü–∏—é, admin ‚Äî –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π.
class FSMunban(StatesGroup):
    text = State() # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–ø–µ–ª–ª—è–Ω—Ç–∞. –ó–Ω–∞—á–µ–Ω–∏–µ —Å–ª–∏–≤–∞–µ—Ç—Å—è –≤ `messageData[appellant_id][f'message_{messageCount}']`, –∞ –ø–æ—Å–ª–µ –æ–±–Ω—É–ª—è–µ—Ç—Å—è.
    time = State() # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç–∞–π–º–∞—É—Ç–∞ –∞–¥–º–∏–Ω–æ–º (unbanCbAppealTimeout).

@dataclass
class AppealDataclass: # –î–∞–Ω–Ω—ã–µ –∞–ø–µ–ª–ª—è—Ü–∏–∏.
    appellant_id: int
    appellant_user: str = ""
    admin_id: int = 0
    admin_user: str = ""
    appeal_id: str = ""
    appeal_isAccepted: bool = False # –ü—Ä–∏–Ω—è—Ç–∞ –ª–∏ –∞–ø–µ–ª–ª—è—Ü–∏—è;
    appeal_status: bool = True      # –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–ø–µ–ª–ª—è—Ü–∏—è.
    toAdmin_message_id: int = 0
    appellant_message_count: int = 0


async def unbanAppealStatusCheck(appellant_id: int, state: FSMContext) -> bool: # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–ø–µ–ª–ª—è—Ü–∏–∏. –ï—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç–∞, —Ç–æ —á–∏—Å—Ç–∏—Ç –ø–∞–º—è—Ç—å –∏ FSM.
    global appealData
    global messagesData
    
    if appellant_id not in appealData:
        return False
    
    appeal_status = appealData[appellant_id].appeal_status
    
    if not appeal_status:
        del appealData[appellant_id]
        del messagesData[appellant_id]
        return False
    
    return True

async def unbanAppealIdWriteInDB(appellant_id: int, state: FSMContext) -> None: # –ó–∞–ø–∏—Å—å ID –∞–ø–µ–ª–ª—è—Ü–∏–∏ –≤ –ë–î.
    global appealData
    appellant_data = await readUser(appellant_id)
    appeal_id = appealData[appellant_id].appeal_id

    if appellant_data[1] == "None":
        appeal_id_for_database = f"{appeal_id}, "
        await updateUser(appellant_id, appeal_ids=appeal_id_for_database)
    else:
        appeal_id_for_database = f"{appellant_data[1]}{appeal_id}, "
        await updateUser(appellant_id, appeal_ids=appeal_id_for_database)

    appealData[appellant_id].appeal_status = False
    try: await state.clear()
    except: pass
    await unbanAppealStatusCheck(appellant_id, state)

async def unbanNoMessageTimeout(appellant_id: int, state: FSMContext) -> None: # –ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –∞–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –±—ã–ª–∞ —Ä–µ—à–µ–Ω–∞, —Ç–æ –æ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è.
    global appealData
    global messagesData

    await sleep(86400) # 24 —á–∞—Å–∞.

    if appellant_id not in appealData:
        return
    
    if not appealData[appellant_id].appeal_status:
        return

    if appealData[appellant_id].appeal_isAccepted:
        return
    
    appellant_user = appealData[appellant_id].appellant_user

    try:
        await BOT.edit_message_text(
            chat_id=ID_OERCHAT_ADMIN,
            message_id=appealData[appellant_id].toAdmin_message_id,
            text=f"üÜò <b>–ò—Å—Ç—ë–∫—à–∞—è –∞–ø–µ–ª–ª—è—Ü–∏—è</b> ‚Äî {appellant_user}\n"
                 f"<blockquote>{messagesData[appellant_id]['message_1']}</blockquote>\n\n"
                 f"<i>–ü—Ä–æ—à–ª–æ 24 —á–∞—Å–∞, –∞ –∂–∞–ª–æ–±–∞ —Ç–∞–∫ –∏ –Ω–µ –±—ã–ª–∞ —Ä–µ—à–µ–Ω–∞</i>",
                reply_markup=None
        )

        await BOT.send_message(
            chat_id=appellant_id,
            text=("‚è∞ <b>–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–∞.</b> –ü—Ä–æ—à–ª–∏ —Å—É—Ç–∫–∏, –∞ –æ–Ω–∞ –Ω–µ –ø—Ä–æ–¥–≤–∏–Ω—É–ª–∞—Å—å.")
        )

    except TelegramBadRequest as e:
        print(f"(X) oerChat/adminside.py: unbanNoMessageTimeout(): TelegramBadRequest: {e}.") if LOG_ERRORS else None
    except Exception as e:
        print(f"(XX) oerChat/adminside.py: unbanNoMessageTimeout(): {e}.")

    try: await state.clear()
    except: pass
    await unbanAppealIdWriteInDB(appellant_id, state)


# –ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã /unban .
@rt.message(F.chat.type == "private", F.text.lower() == "–∞–ø–µ–ª–ª—è—Ü–∏—è")
@rt.message(F.chat.type == "private", Command("unban"))
async def unbanCmd(message: Message, state: FSMContext) -> None:
    global appealData
    global messagesData
    appellant_id = message.from_user.id
    appellant_user = f"@{message.from_user.username}" if message.from_user.username else f"{message.from_user.first_name} (<code>{message.from_user.id}</code>)"
    await createUser(appellant_id)
    appellant_data = await readUser(appellant_id)

    if appellant_data[2] > datetime.now().timestamp():
        timeout_end = datetime.fromtimestamp(appellant_data[2])
        await message.reply(f"üìµ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–æ <b>{timeout_end.strftime('%d.%m.%Y %H:%M')}</b>.")
        return

    if appellant_id in appealData:
        await message.reply("‚ùå <b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –∞–ø–µ–ª–ª—è—Ü–∏—è!</b>")
        return
    
    '''–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∞–ø–µ–ª–ª—è—Ü–∏–∏.'''
    from random import choice, randint
    appeal_codename = choice(["Charlie", "Delta", "Echo", "Foxtrot", "Golf", "Hotel", "Alpha", "Bravo", "Kilo"])
    appeal_id = f"{appellant_id}_{appeal_codename}_{randint(0, 9)}"

    if appellant_data and appellant_data[1] != "None":
        existing_ids = appellant_data[1].split(", ")
        while appeal_id in existing_ids:
            appeal_codename = choice(["Charlie", "Delta", "Echo", "Foxtrot", "Golf", "Hotel", "Alpha", "Bravo", "Kilo"])
            appeal_id = f"{appellant_id}_{appeal_codename}_{randint(0, 9)}"
    ''''''

    appealData[appellant_id] = AppealDataclass(
        appellant_id = appellant_id,
        appellant_user = appellant_user,
        appeal_id = appeal_id
    )

    messagesData[appellant_id] = {}

    await state.set_state(FSMunban.text)

    await message.reply(f"üÜò <b>–ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–∞ —Ä–∞–∑–±–∞–Ω</b> ‚Äî {appellant_user}\n"
                        "–í–∞—à–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –æ—Ç–∫—É–¥–∞ —Å –í–∞–º–∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –æ–±—â–µ–Ω–∏–µ.\n"
                        "–û–ø–∏—à–∏—Ç–µ –∑–∞ —á—Ç–æ –í–∞—Å –∑–∞–±–∞–Ω–∏–ª–∏ <i>(–µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ)</i> –∏ –ø–æ—á–µ–º—É –í—ã –Ω–∞—Ä—É—à–∞–ª–∏.\n\n"
                        f"<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /cancel –∏–ª–∏ <code>{PREFIX}–æ—Ç–º–µ–Ω–∞</code>.</i>")
    
    await message.answer("<i>–ï—Å–ª–∏ –í—ã –Ω–µ –∑–∞–±–∞–Ω–µ–Ω—ã, –Ω–æ –ø–æ–¥–∞—ë—Ç–µ –∞–ø–µ–ª–ª—è—Ü–∏—é, —Ç–æ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –≥–ª–æ–±–∞–Ω –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–µ—Ç –Ω–∞ –ø–æ–¥–∞—á—É –∞–ø–µ–ª–ª—è—Ü–∏–π.</i>")
    
# –ê–ø–µ–ª–ª—è–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.
@rt.message(FSMunban.text)
async def unbanAppellantMessage(message: Message, state: FSMContext) -> None: # –ü—Ä–∏—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–ø–µ–ª–ª—è–Ω—Ç–∞.
    appellant_id = message.from_user.id

    appeal_active = await unbanAppealStatusCheck(appellant_id, state)
    if not appeal_active:
        return

    if not message.text:
        await message.reply("‚ùå <b>–û—à–∏–±–∫–∞.</b> –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã.")
        return
    
    global appealData
    global messagesData
    
    appellant_user = appealData[appellant_id].appellant_user
    appeal_id = appealData[appellant_id].appeal_id

    appealData[appellant_id].appellant_message_count += 1
    appellant_message_count = appealData[appellant_id].appellant_message_count
    message_N = f"message_{appellant_message_count}"

    if appellant_message_count > 1 and not appealData[appellant_id].appeal_isAccepted:
        appealData[appellant_id].appellant_message_count -= 1
        await message.reply("üõÇ <b>–í–∞—à—É –∞–ø–µ–ª–ª—è—Ü–∏—é –µ—â—ë –Ω–µ –ø—Ä–∏–Ω—è–ª–∏.</b>")
        return

    match appellant_message_count:
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ (–æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ø–µ–ª–ª—è—Ü–∏–∏).
        case 1:
            messagesData[appellant_id][message_N] = message.text

            toAdmin_message = await BOT.send_message(
                chat_id=ID_OERCHAT_ADMIN,
                message_thread_id=ID_OERCHAT_ADMIN_APPEALS_THREAD,
                text=f"üÜò <b>–ù–æ–≤–∞—è –∞–ø–µ–ª–ª—è—Ü–∏—è</b> ‚Äî {appellant_user}\n"
                     f"<blockquote>{message.text}</blockquote>",
                    reply_markup=unbanKeyboard_(appeal_id)
            )
            appealData[appellant_id].toAdmin_message_id = toAdmin_message.message_id

            await message.reply("‚úÖ <b>–ê–ø–µ–ª–ª—è—Ü–∏—è –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.</b> –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")

            create_task(unbanNoMessageTimeout(appellant_id, state))

        # –ï—Å–ª–∏ –∞–ø–µ–ª–ª—è—Ü–∏—è —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞ –∏ —á–µ–ª–æ–≤–µ–∫ –≤–µ–¥—ë—Ç –ø–µ—Ä–µ–ø–∏—Å–∫—É.
        case _:
            messagesData[appellant_id][message_N] = message.text

            await BOT.edit_message_text(
                chat_id=ID_OERCHAT_ADMIN,
                message_id=appealData[appellant_id].toAdmin_message_id,
                text=f"üÜò <b>–ê–ø–µ–ª–ª—è—Ü–∏—è</b> ‚Äî {appellant_user}\n"
                     f"<blockquote>{messagesData[appellant_id][message_N]}</blockquote>\n\n"
                     f"<i>–ü—Ä–∏–Ω—è—Ç {appealData[appellant_id].admin_user}</i>",
                    reply_markup=unbanKeyboardAcceptedActions_(appeal_id)
            )

            await BOT.set_message_reaction(
                chat_id=appellant_id,
                message_id=message.message_id,
                reaction=[{"type": "emoji", "emoji": "üëç"}]
            )


# –ê–ø–µ–ª–ª—è—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞.
@rt.callback_query(F.data.startswith("unbanAppealAccept_"))
async def unbanCbAppealAccept(callback: CallbackQuery, state: FSMContext) -> None:
    global appealData
    global messagesData
    appellant_id = int(callback.data.split("_")[1])

    if appellant_id not in appealData:
        await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.message.edit_reply_markup(reply_markup=None)
        return

    appellant_user = appealData[appellant_id].appellant_user
    admin_user = f"@{callback.from_user.username}" if callback.from_user.username else f"{callback.from_user.first_name} (<code>{callback.from_user.id}</code>)"
    appeal_id = appealData[appellant_id].appeal_id
    appellant_data = await readUser(appellant_id)
    appeal_ids = appellant_data[1].split(", ")

    for existing_id in appeal_ids:
        if appeal_id == existing_id:
            await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await callback.message.edit_reply_markup(reply_markup=None)
            return

    appealData[appellant_id].admin_id = callback.from_user.id
    appealData[appellant_id].admin_user = admin_user
    appealData[appellant_id].appeal_isAccepted = True

    try:
        await callback.message.edit_text(f"üÜò <b>–ê–ø–µ–ª–ª—è—Ü–∏—è</b> ‚Äî {appellant_user}\n"
                                         f"<blockquote>{messagesData[appellant_id]['message_1']}</blockquote>\n\n"
                                         f"<i>–ü—Ä–∏–Ω—è—Ç {admin_user}</i>",
                                        reply_markup=unbanKeyboardAcceptedActions_(appeal_id))
        
        await BOT.send_message(
            chat_id=appellant_id,
            text="‚úÖ <b>–ê–ø–µ–ª–ª—è—Ü–∏—è –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b> –£ –í–∞—Å –Ω–∞—á–∞–ª—Å—è –¥–∏–∞–ª–æ–≥ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º <i>(—á–µ—Ä–µ–∑ –±–æ—Ç–∞. –ü–∏—à–∏—Ç–µ –ø—Ä—è–º–æ —Å—é–¥–∞)</i>."
        )

    except TelegramBadRequest as e:
        await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.message.reply("‚ùå <b>–û—à–∏–±–∫–∞.</b> –í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —É–¥–∞–ª–∏–ª –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –±–æ—Ç–æ–º. –í–æ –≤—Å—è–∫–æ–º —Å–ª—É—á–∞–µ, –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å –Ω–∏–º —Å–≤—è–∑—å. –ê–ø–µ–ª–ª—è—Ü–∏—è –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
        await callback.message.edit_reply_markup(reply_markup=None)
        print(f"(X) oerChat/adminside.py: unbanCbAppealAccept(): TelegramBadRequest: {e}.") if LOG_ERRORS else None
        await unbanAppealIdWriteInDB(appellant_id, state)
        return
    except Exception as e:
        await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.message.reply("‚ùå <b>–ù–µ–ø—Ä–¥–µ–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b> –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º. –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏ –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏. –ê–ø–µ–ª–ª—è—Ü–∏—è –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
        await callback.message.edit_reply_markup(reply_markup=None)
        print(f"(XX) oerChat/adminside.py: unbanCbAppealAccept(): {e}.")
        await unbanAppealIdWriteInDB(appellant_id, state)
        return

    # –î–∏—Å–∫—É—Å—Å–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤ `unbanAppellantMessage`: `match appellant_message_count`: `case _`.
    
# –ê–ø–µ–ª–ª—è—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.
@rt.callback_query(F.data.startswith("unbanAppealDecline_"))
async def unbanCbAppealDecline(callback: CallbackQuery, state: FSMContext) -> None:
    global appealData
    global messagesData
    appellant_id = int(callback.data.split("_")[1])

    if appellant_id not in appealData:
        await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.message.edit_reply_markup(reply_markup=None)
        return

    appellant_user = appealData[appellant_id].appellant_user
    admin_user = f"@{callback.from_user.username}" if callback.from_user.username else f"{callback.from_user.first_name} (<code>{callback.from_user.id}</code>)"
    appeal_id = appealData[appellant_id].appeal_id
    appellant_data = await readUser(appellant_id)
    appeal_ids = appellant_data[1].split(", ")

    for existing_id in appeal_ids:
        if appeal_id == existing_id:
            await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await callback.message.edit_reply_markup(reply_markup=None)
            return

    appealData[appellant_id].admin_id = callback.from_user.id
    appealData[appellant_id].admin_user = admin_user

    try:
        await BOT.edit_message_text(
            chat_id=ID_OERCHAT_ADMIN,
            message_id=appealData[appellant_id].toAdmin_message_id,
            text=f"üÜò <b>–ó–∞–∫—Ä—ã—Ç–∞—è –∞–ø–µ–ª–ª—è—Ü–∏—è</b> ‚Äî {appellant_user}\n"
                f"<blockquote>{messagesData[appellant_id]['message_1']}</blockquote>\n\n"
                f"<i>–û—Ç–∫–ª–æ–Ω–µ–Ω–∞ {admin_user}</i>",
                reply_markup=None
        )

        await BOT.send_message(
            chat_id=appellant_id,
            text="üóë <b>–í–∞—à—É –∞–ø–µ–ª–ª—è—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–∏–ª–∏.</b>"
        )

    except TelegramBadRequest as e:
        print(f"(X) oerChat/adminside.py: unbanCbAppealDecline(): TelegramBadRequest: {e}.") if LOG_ERRORS else None
    except Exception as e:
        print(f"(XX) oerChat/adminside.py: unbanCbAppealDecline(): {e}.")

    await unbanAppealIdWriteInDB(appellant_id, state)

# –í—ã–¥–∞–Ω —Ç–∞–π–º–∞—É—Ç.
@rt.callback_query(F.data.startswith("unbanAppealTimeout_"))
async def unbanCbAppealTimeout(callback: CallbackQuery, state: FSMContext) -> None:
    global appealData
    global messagesData
    appellant_id = int(callback.data.split("_")[1])

    if appellant_id not in appealData:
        await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.message.edit_reply_markup(reply_markup=None)
        return

    admin_id = callback.from_user.id
    admin_user = f"@{callback.from_user.username}" if callback.from_user.username else f"{callback.from_user.first_name} (<code>{admin_id}</code>)"
    appeal_id = appealData[appellant_id].appeal_id
    appellant_data = await readUser(appellant_id)
    appeal_ids = appellant_data[1].split(", ")

    for existing_id in appeal_ids:
        if appeal_id == existing_id:
            await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await callback.message.edit_reply_markup(reply_markup=None)
            return

    appealData[appellant_id].admin_id = callback.from_user.id
    appealData[appellant_id].admin_user = admin_user

    await state.clear()
    await state.set_state(FSMunban.time)
    await state.update_data(appellant_id=appellant_id)

    await callback.message.edit_text("‚è±Ô∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤ <b>—Å–ª–µ–¥—É—é—â–µ–º</b> —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—Ä–µ–º—è –≤ <b>—Å–µ–∫—É–Ω–¥–∞—Ö,</b> "
                                     "–Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –ª–∏—à–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º. <b>–ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ.</b>")
    
@rt.message(FSMunban.time)
async def unbanFSMtime(message: Message, state: FSMContext) -> None:
    global appealData
    global messagesData
    data = await state.get_data()
    appellant_id = data.get('appellant_id')
    appellant_user = appealData[appellant_id].appellant_user
    admin_id = appealData[appellant_id].admin_id
    admin_user = appealData[appellant_id].admin_user

    if not appellant_id or appellant_id not in appealData:
        return

    if message.from_user.id != admin_id:
        return

    try:
        time_seconds = int(message.text.strip())

        if time_seconds <= 0:
            await message.reply("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
            return

        timeout = int(datetime.now().timestamp()) + time_seconds
        
        if time_seconds < 60: time_display = f"{time_seconds} —Å–µ–∫—É–Ω–¥"
        elif time_seconds < 3600: time_minutes = time_seconds // 60; time_display = f"{time_minutes} –º–∏–Ω—É—Ç"
        else: time_hours = time_seconds // 3600; time_display = f"{time_hours} —á–∞—Å–æ–≤"
        
        await updateUser(appellant_id, timeout=timeout)

        try:
            await BOT.edit_message_text(
                chat_id=ID_OERCHAT_ADMIN,
                message_id=appealData[appellant_id].toAdmin_message_id,
                text=f"üÜò <b>–ó–∞–∫—Ä—ã—Ç–∞—è –∞–ø–µ–ª–ª—è—Ü–∏—è</b> ‚Äî {appellant_user}\n"
                    f"<blockquote>{messagesData[appellant_id]['message_1']}</blockquote>\n\n"
                    f"<i>{admin_user} –≤—ã–¥–∞–ª —Ç–∞–π–º–∞—É—Ç –Ω–∞ {time_display}</i>",
                    reply_markup=None
            )

            await BOT.send_message(
                chat_id=appellant_id,
                text=f"üìµ <b>–í–∞–º –≤—ã–¥–∞–ª–∏ —Ç–∞–π–º–∞—É—Ç –Ω–∞ {time_display}.</b>"
            )

        except TelegramBadRequest as e:
            print(f"(X) oerChat/adminside.py: unbanFSMtime(): TelegramBadRequest: {e}.") if LOG_ERRORS else None
            return
        
        await unbanAppealIdWriteInDB(appellant_id, state)

    except ValueError:
        await message.reply("‚ùå <b>–û—à–∏–±–∫–∞!</b> –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–∫—É–Ω–¥—ã —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        print(f"(X) oerChat/adminside.py: unbanFSMtime(): ValueError: {e}.") if LOG_ERRORS else None
        return
    except Exception as e:
        await message.reply("‚ùå <b>–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!</b> –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏ –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        print(f"(XX) oerChat/adminside.py: unbanFSMtime(): {e}.")
        return


# –í —Ä–∞–∑–±–∞–Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.
@rt.callback_query(F.data.startswith("unbanAppealAcceptUnban_"))
async def unbanCbAppealAcceptUnban(callback: CallbackQuery, state: FSMContext) -> None:    
    global appealData
    appellant_id = int(callback.data.split("_")[1])

    if appellant_id not in appealData:
        await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.message.edit_reply_markup(reply_markup=None)
        return

    appellant_user = appealData[appellant_id].appellant_user
    admin_id = appealData[appellant_id].admin_id
    admin_user = appealData[appellant_id].admin_user
    appeal_id = appealData[appellant_id].appeal_id
    appellant_data = await readUser(appellant_id)
    appeal_ids = appellant_data[1].split(", ")

    for existing_id in appeal_ids:
        if appeal_id == existing_id:
            await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await callback.message.edit_reply_markup(reply_markup=None)
            return

    if callback.from_user.id != admin_id and callback.from_user.id != SUPERADMIN:
        await callback.answer("üñï –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∞–ø–µ–ª–ª—è—Ü–∏—è!")
        return

    try:
        await BOT.edit_message_text(
            chat_id=ID_OERCHAT_ADMIN,
            message_id=appealData[appellant_id].toAdmin_message_id,
            text=f"üÜò <b>–†–µ—à—ë–Ω–Ω–∞—è –∞–ø–µ–ª–ª—è—Ü–∏—è</b> ‚Äî {appellant_user}\n"
                f"–ü—Ä–∏–Ω—è—Ç {admin_user}\n"
                f"–ò—Ç–æ–≥: —Ä–∞–∑–±–∞–Ω",
                reply_markup=None
        )

        await BOT.send_message(
            chat_id=appellant_id,
            text="üéâ <b>–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã!</b> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –°–Ω–æ–≤–∞."
        )
        await BOT.send_message(
            chat_id=appellant_id,
            text="–ï—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–π—Ç–∏ –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ —á–∞—Ç <a href='https://blog.ourempire.ru/chats'>—Å–µ—Ç–∫–∏</a> –í–∞–º –ø–∏—à–µ—Ç —á—Ç–æ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã ‚Äî —ç—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –õ–° @vkuskiy."
        )
    
    except TelegramBadRequest as e:
        await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.message.reply("‚ùå <b>–û—à–∏–±–∫–∞.</b> –í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —É–¥–∞–ª–∏–ª –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –±–æ—Ç–æ–º. –í–æ –≤—Å—è–∫–æ–º —Å–ª—É—á–∞–µ, –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å –Ω–∏–º —Å–≤—è–∑—å. –ê–ø–µ–ª–ª—è—Ü–∏—è –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
        await callback.message.edit_reply_markup(reply_markup=None)
        print(f"(X) oerChat/adminside.py: unbanCbAppealAcceptUnban(): TelegramBadRequest: {e}.") if LOG_ERRORS else None
    except Exception as e:
        await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.message.reply("‚ùå <b>–ù–µ–ø—Ä–¥–µ–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b> –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º. –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏ –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏. –ê–ø–µ–ª–ª—è—Ü–∏—è –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
        await callback.message.edit_reply_markup(reply_markup=None)
        print(f"(XX) oerChat/adminside.py: unbanCbAppealAcceptUnban(): {e}.")

    await unbanAppealIdWriteInDB(appellant_id, state)

# –í —Ä–∞–∑–±–∞–Ω–µ –æ—Ç–∫–∞–∑–∞–Ω–æ.
@rt.callback_query(F.data.startswith("unbanAppealDeclineUnban_"))
async def unbanCbAppealDeclineUnban(callback: CallbackQuery, state: FSMContext) -> None:
    global appealData
    appellant_id = int(callback.data.split("_")[1])

    if appellant_id not in appealData:
        await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.message.edit_reply_markup(reply_markup=None)
        return

    appellant_user = appealData[appellant_id].appellant_user
    admin_id = appealData[appellant_id].admin_id
    admin_user = appealData[appellant_id].admin_user
    appeal_id = appealData[appellant_id].appeal_id
    appellant_data = await readUser(appellant_id)
    appeal_ids = appellant_data[1].split(", ")

    for existing_id in appeal_ids:
        if appeal_id == existing_id:
            await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await callback.message.edit_reply_markup(reply_markup=None)
            return

    if callback.from_user.id != admin_id and callback.from_user.id != SUPERADMIN:
        await callback.answer("üñï –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∞–ø–µ–ª–ª—è—Ü–∏—è!")
        return

    try:
        await BOT.edit_message_text(
            chat_id=ID_OERCHAT_ADMIN,
            message_id=appealData[appellant_id].toAdmin_message_id,
            text=f"üÜò <b>–†–µ—à—ë–Ω–Ω–∞—è –∞–ø–µ–ª–ª—è—Ü–∏—è</b> ‚Äî {appellant_user}\n"
                f"–ü—Ä–∏–Ω—è—Ç {admin_user}\n"
                f"–ò—Ç–æ–≥: –æ—Ç–∫–∞–∑",
                reply_markup=None
        )

        await BOT.send_message(
            chat_id=appellant_id,
            text="‚ùå <b>–í–∞–º –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ —Ä–∞–∑–±–∞–Ω–µ.</b>"
        )
    
    except TelegramBadRequest as e:
        await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.message.reply("‚ùå <b>–û—à–∏–±–∫–∞.</b> –í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —É–¥–∞–ª–∏–ª –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –±–æ—Ç–æ–º. –í–æ –≤—Å—è–∫–æ–º —Å–ª—É—á–∞–µ, –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å –Ω–∏–º —Å–≤—è–∑—å. –ê–ø–µ–ª–ª—è—Ü–∏—è –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
        await callback.message.edit_reply_markup(reply_markup=None)
        print(f"(X) oerChat/adminside.py: unbanCbAppealDeclineUnban(): TelegramBadRequest: {e}.") if LOG_ERRORS else None
    except Exception as e:
        await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.message.reply("‚ùå <b>–ù–µ–ø—Ä–¥–µ–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞</b> –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º. –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏ –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏. –ê–ø–µ–ª–ª—è—Ü–∏—è –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
        await callback.message.edit_reply_markup(reply_markup=None)
        print(f"(XX) oerChat/adminside.py: unbanCbAppealDeclineUnban(): {e}.")

    await unbanAppealIdWriteInDB(appellant_id, state)


# –ü—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–ø–µ–ª–ª—è–Ω—Ç–∞ –≤ –¥–∏—Å–∫—É—Å—Å–∏–∏.
@rt.callback_query(F.data.startswith("unbanAppealMsgHistoryPrev_"))
async def unbanCbAppealMsgHistoryPrev(callback: CallbackQuery) -> None:
    global appealData
    appellant_id = int(callback.data.split("_")[1])

    if appellant_id not in appealData:
        await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.message.edit_reply_markup(reply_markup=None)
        return

    appellant_user = appealData[appellant_id].appellant_user
    admin_id = appealData[appellant_id].admin_id
    admin_user = appealData[appellant_id].admin_user
    appeal_id = appealData[appellant_id].appeal_id
    appellant_data = await readUser(appellant_id)
    appeal_ids = appellant_data[1].split(", ")

    for existing_id in appeal_ids:
        if appeal_id == existing_id:
            await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await callback.message.edit_reply_markup(reply_markup=None)
            return

    if callback.from_user.id != admin_id and callback.from_user.id != SUPERADMIN:
        await callback.answer("üñï –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∞–ø–µ–ª–ª—è—Ü–∏—è!")
        return
    
    appealData[appellant_id].appellant_message_count -= 1
    appellant_message_count = appealData[appellant_id].appellant_message_count

    if appellant_message_count <= 0:
        appealData[appellant_id].appellant_message_count += 1
        await callback.answer("‚ùå –≠—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    await BOT.edit_message_text(
        chat_id=ID_OERCHAT_ADMIN,
        message_id=appealData[appellant_id].toAdmin_message_id,
        text=f"üÜò <b>–ê–ø–µ–ª–ª—è—Ü–∏—è</b> ‚Äî {appellant_user}\n"
             f"<blockquote>{messagesData[appellant_id][f'message_{appellant_message_count}']}</blockquote>\n\n"
             f"<i>–ü—Ä–∏–Ω—è—Ç {admin_user}</i>",
            reply_markup=unbanKeyboardAcceptedActions_(appeal_id)
    )

# –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–ø–µ–ª–ª—è–Ω—Ç–∞ –≤ –¥–∏—Å–∫—É—Å—Å–∏–∏.
@rt.callback_query(F.data.startswith("unbanAppealMsgHistoryNext_"))
async def unbanCbAppealMsgHistoryNext(callback: CallbackQuery) -> None:
    global appealData
    appellant_id = int(callback.data.split("_")[1])

    if appellant_id not in appealData:
        await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await callback.message.edit_reply_markup(reply_markup=None)
        return

    appellant_user = appealData[appellant_id].appellant_user
    admin_id = appealData[appellant_id].admin_id
    admin_user = appealData[appellant_id].admin_user
    appeal_id = appealData[appellant_id].appeal_id
    appellant_data = await readUser(appellant_id)
    appeal_ids = appellant_data[1].split(", ")

    for existing_id in appeal_ids:
        if appeal_id == existing_id:
            await callback.answer("‚ùì –ê–ø–µ–ª–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await callback.message.edit_reply_markup(reply_markup=None)
            return

    if callback.from_user.id != admin_id and callback.from_user.id != SUPERADMIN:
        await callback.answer("üñï –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∞–ø–µ–ª–ª—è—Ü–∏—è!")
        return
    
    appealData[appellant_id].appellant_message_count += 1
    appellant_message_count = appealData[appellant_id].appellant_message_count

    if f"message_{appellant_message_count}" not in messagesData[appellant_id]:
        appealData[appellant_id].appellant_message_count -= 1
        await callback.answer("‚ùå –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    await BOT.edit_message_text(
        chat_id=ID_OERCHAT_ADMIN,
        message_id=appealData[appellant_id].toAdmin_message_id,
        text=f"üÜò <b>–ê–ø–µ–ª–ª—è—Ü–∏—è</b> ‚Äî {appellant_user}\n"
             f"<blockquote>{messagesData[appellant_id][f'message_{appellant_message_count}']}</blockquote>\n\n"
             f"<i>–ü—Ä–∏–Ω—è—Ç {admin_user}</i>",
            reply_markup=unbanKeyboardAcceptedActions_(appeal_id)
    )


# –ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.
@rt.message(F.chat.id == ID_OERCHAT_ADMIN, F.message_thread_id == ID_OERCHAT_ADMIN_APPEALS_THREAD, F.reply_to_message != None, F.text)
async def unbanAdminMessage(message: Message) -> None:
    global appealData
    appellant_id = None
    replied_id = message.reply_to_message.message_id
    
    for a_id, data in appealData.items():
        if data.admin_id == message.from_user.id and data.appeal_isAccepted and data.toAdmin_message_id == replied_id:
            appellant_id = a_id
            break

    if appellant_id is None:
        return

    try:
        await BOT.send_message(
            chat_id=appellant_id,
            text=(f"üÜò <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n"
                    f"<blockquote>{message.text}</blockquote>")
        )

    except Exception as e:
        print(f"(XX) oerChat/adminside.py: unbanAdminMessage(): {e}.") if LOG_ERRORS else None
        return
    

# –õ—é—Ç–æ —É–¥–∞–ª–∏—Ç—å –≤—Å—é –ø–∞–º—è—Ç—å appealData –∏ messagesData.
@rt.message(F.chat.id == ID_OERCHAT_ADMIN, F.from_user.id == SUPERADMIN, F.text.lower() == f"{PREFIX}–æ—á–∏—Å—Ç–∏—Ç—å –∞–ø–µ–ª–ª—è—Ü–∏–∏")
async def unbanClearAllDataConfirmation(message: Message) -> None:
    keyboard = InlineKeyboardBuilder([
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="unbanClearAllDataConfirm"),
         InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="unbanClearAllDataCancel")]
    ])

    await message.reply("‚ùì –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
                        reply_markup=keyboard)

@rt.callback_query(F.data == "unbanClearAllDataConfirm")
async def unbanClearAllDataConfirm(callback: CallbackQuery) -> None:
    if callback.from_user.id != SUPERADMIN:
        await callback.answer("üñï –¢—ã –Ω–µ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω")
        return

    global appealData
    global messagesData

    appealData = {}
    messagesData = {}

    await callback.message.edit_text("‚úÖ <b>–í—Å—è –ø–∞–º—è—Ç—å –æ–± –∞–ø–µ–ª–ª—è—Ü–∏—è—Ö –æ—á–∏—â–µ–Ω–∞.</b>",
                                     reply_markup=None)
    
@rt.callback_query(F.data == "unbanClearAllDataCancel")
async def unbanClearAllDataCancel(callback: CallbackQuery) -> None:
    if callback.from_user.id != SUPERADMIN:
        await callback.answer("üñï –¢—ã –Ω–µ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω")
        return

    await callback.message.delete()
'''^ /unban ^'''